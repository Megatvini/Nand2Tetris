// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	static int keyBoardAddress;
	static int maxStringLength;
	

    /** Initializes the keyboard. */
    function void init() {
		let keyBoardAddress = 24576;
		let maxStringLength = 1024;
		return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return Memory.peek(keyBoardAddress);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
		var char key;
		var char savedKey;
		
		let key = Keyboard.keyPressed();
		while (key = 0) {
			let key = Keyboard.keyPressed();
		}
		
		let savedKey = key;
		while (~(key = 0)) {
			let key = Keyboard.keyPressed();
		}
		
		if (savedKey = String.newLine()) {
			do Output.println();
		} else {
			if (savedKey = String.backSpace()) {
				do Output.backSpace();
			} else {
				do Output.printChar(savedKey);
			}
		}
		
		return savedKey;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
		var String res;
		var char curChar;
		
		do Output.printString(message);
		
		let res = String.new(maxStringLength);
		let curChar = Keyboard.readChar();
		while (~(curChar = String.newLine())) {
			if (curChar = String.backSpace()) {
				if (res.length() > 0) {
					do res.eraseLastChar();
				}
			} else {
				do res.appendChar(curChar);
			}
			let curChar = Keyboard.readChar();
		}
		
		do Output.println();
		
		return res;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
		var String s;
		var int i;
		var int res;
		var int sign;
		
		let sign = 1;
		let res = 0;
		let i = 0;

		let s = Keyboard.readLine(message);
		
		if (s.length() = 0) {
			return 0;
		}
		
		if (s.charAt(0) = 45) {
			let sign = -1;
			let i = 1;
		}
		
		while (i < s.length()) {
			let res = (res * 10) + (s.charAt(i) - 48);
			let i = i + 1;
		}
		
		let res = res * sign;
		
		return res;
    }
}
